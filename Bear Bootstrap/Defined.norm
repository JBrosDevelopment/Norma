def endsWith: str, end {
    var len = length $str$
    var ind = ($len$ - 1)
    if $str[ind]$ = $end$ {
        return true
    }
    else {
        return false
    }
}
def replace: val, check, rep {
    var str = ""
    for c in $val$ {
        if $c$ = $check$ {
            str + append $str$, $rep$
        }
        else {
            str = append $str$, $c$
        }
    }
    return $str$
}
def combinePath: path1, path2 {
    var endsWithSlash = endsWith $path1$, "\\"
    if $endsWithSlash$ = false {
        endsWithSlash = endsWith $path1$, "/"
    }
    
    if $endsWithSlash$ = true {
        var path = "$path1$$path2$"
        var rep = replace $path$, "/", "\\"
        return $rep$
    }
    else {
        var path = "$path1$\\$path2$"
        var rep = replace $path$, "/", "\\"
        return $rep$
    }
}
def use: relPath {
    var path = combinePath envDir, $relPath$
    var content = readFile $path$
    runCode $content$
}
def split: text, char {
    var parts = []
    var str = ""
    for c in $text$ {
        if $c$ = $char$ {
            parts = append $parts$, $str$
            str = ""
        }
        else {
            str + $c$
        }
    }
    parts = append $parts$, $str$
    return $parts$
}
def toCharArray: text {
    var parts = []
    for c in $text$ {
        parts = append $parts$, $c$
    }
    return $parts$
}
def contains: array, value {
    var ret = false
    for i in $array$ {
        if $i$ = $value$ {
            ret = true
        }
    }
    return $ret$
}
def join: array, text {
    var string = none
    var len = length $array$
    var lenMinusOne = ($len$ - 1)
    for i in $len$ {
        string + $array[i]$
        if $i$ != $lenMinusOne$ {
            string + $text$
        }
    }
    return $string$
}
def skip: array, index {
    var newArray = []
    for i in length $array$ {
        if $i$ >= $index$ { 
            newArray = append $newArray$, $array[i]$
        }
    }
    return $newArray$
}
def take: array, index {
    var newArray = []
    for i in length $array$ {
        if $i$ < $index$ { 
            newArray = append $newArray$, $array[i]$
        }
    }
    return $newArray$
}
def last: array {
    var arLen = length $array$
    var arIndex = ($arLen$ - 1)
    return $array[arIndex]$
}
def first: array {
    return $arLen[0]$
}
def any: array, test {
    var ret = false
    for a in $array$ {
        for t in $test$ {
            if $a$ = $t$ {
                ret = true
            }
        }
    }
    return $ret$
}


struct DictionaryItem { Key, Value }

def getDictionaryItemFromKey: dictionary, key {
    var ret = none
    for d in $dictionary$ {
        if $d.Key$ = $key$ {
            ret = $d$
        }
    }
    return $ret$
}
def getDictionaryValueFromKey: dictionary, key {
    var ret = none
    for d in $dictionary$ {
        if $d.Key$ = $key$ {
            ret = $d.Value$
        }
    }
    return $ret$
}
def getDictionaryIndexFromKey: dictionary, key {
    var ret = none
    for i in length $dictionary$ {
        if $dictionary[i].Key$ = $key$ {
            ret = $i$
        }
    }
    return $ret$
}